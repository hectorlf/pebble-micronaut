apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
   mavenCentral()
}

uploadArchives {
   repositories {
      mavenDeployer {
         snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
            authentication(userName: mavenUser, password: mavenPassword)
         }
         repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
            authentication(userName: mavenUser, password: mavenPassword)
         }
         
         pom.project {
            name "Micronaut ViewsRenderer for the Pebble template engine"
            description "Pebble template engine integration with Micronaut's server-side view rendering"
            url 'https://github.com/hectorlf/pebble-micronaut'
            licenses {
               license {
                  name "The MIT License (MIT)"
                  url 'https://opensource.org/licenses/MIT'
               }
            }
            scm {
               url 'https://github.com/hectorlf/pebble-micronaut'
            }
            developers {
               developer {
                  name "Hector Lopez"
                  email 'postmaster@hectorlopezfernandez.com'
                  url 'https://www.hectorlopezfernandez.com'
               }
            }
         }
         beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
      }
   }
}

project.group = 'com.hectorlopezfernandez.pebble'
project.archivesBaseName = 'pebble-micronaut'
project.version = '1.1.1-SNAPSHOT'


dependencies {
   annotationProcessor 'io.micronaut:micronaut-inject-java:1.1.4'

   compile 'io.micronaut:micronaut-inject-java:1.1.4'
   compile 'io.micronaut:micronaut-runtime:1.1.4'
   compile 'io.micronaut:micronaut-views:1.1.3'
   compile 'io.pebbletemplates:pebble:3.0.10'
   
   testCompile 'junit:junit:4.12'
}


task sourcesJar(type: Jar, dependsOn: classes) {
   classifier = 'sources'
   from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
   classifier = 'javadoc'
   from javadoc.destinationDir
}

artifacts {
   archives sourcesJar
   archives javadocJar
}

signing {
   required { !version.endsWith("SNAPSHOT") && gradle.taskGraph.hasTask("uploadArchives") }
   sign configurations.archives
}